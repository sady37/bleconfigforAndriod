// 数据存储结构
interface RecentWiFi {
    ssid: string;
    password: string;
    lastUsed: string; // ISO timestamp
}

interface RecentServer {
    address: string;
    port: number;
    lastUsed: string;
}

interface RecentDevice {
    id: string;
    mac: string;
    lastConfigured: string;
    configCount: number;
}

class RecentDataManager {
    private static MAX_ITEMS = 5;
    private static WIFI_KEY = 'recent_wifi';
    private static SERVER_KEY = 'recent_servers';
    private static DEVICE_KEY = 'recent_devices';

    // 保存 WiFi 记录
    static saveWiFi(ssid: string, password: string) {
        const existing = this.getRecentWiFi();
        const newItem = { ssid, password, lastUsed: new Date().toISOString() };
        
        // 删除已存在的相同 SSID
        const filtered = existing.filter(item => item.ssid !== ssid);
        // 添加新记录到开头
        filtered.unshift(newItem);
        // 保持最大数量
        const updated = filtered.slice(0, this.MAX_ITEMS);
        
        localStorage.setItem(this.WIFI_KEY, JSON.stringify(updated));
    }

    // 保存服务器记录
    static saveServer(address: string, port: number) {
        const existing = this.getRecentServers();
        const newItem = { address, port, lastUsed: new Date().toISOString() };
        
        const filtered = existing.filter(
            item => !(item.address === address && item.port === port)
        );
        filtered.unshift(newItem);
        const updated = filtered.slice(0, this.MAX_ITEMS);
        
        localStorage.setItem(this.SERVER_KEY, JSON.stringify(updated));
    }

    // 更新设备配置记录
    static updateDeviceConfig(id: string, mac: string) {
        const existing = this.getRecentDevices();
        const now = new Date();
        const timestamp = `${now.getMonth()+1}/${now.getDate()} ${now.getHours()}:${String(now.getMinutes()).padStart(2, '0')}`;
        
        const existingDevice = existing.find(d => d.id === id);
        const newItem = {
            id,
            mac,
            lastConfigured: timestamp,
            configCount: (existingDevice?.configCount || 0) + 1
        };
        
        const filtered = existing.filter(item => item.id !== id);
        filtered.unshift(newItem);
        const updated = filtered.slice(0, this.MAX_ITEMS);
        
        localStorage.setItem(this.DEVICE_KEY, JSON.stringify(updated));
    }

    // 获取最近的 WiFi 记录
    static getRecentWiFi(): RecentWiFi[] {
        const stored = localStorage.getItem(this.WIFI_KEY);
        return stored ? JSON.parse(stored) : [];
    }

    // 获取最近的服务器记录
    static getRecentServers(): RecentServer[] {
        const stored = localStorage.getItem(this.SERVER_KEY);
        return stored ? JSON.parse(stored) : [];
    }

    // 获取设备配置记录
    static getRecentDevices(): RecentDevice[] {
        const stored = localStorage.getItem(this.DEVICE_KEY);
        return stored ? JSON.parse(stored) : [];
    }
}
