Changes in v2.0:
1. Replace Intent scanning with direct RadarBleManager usage
2. Add RadarBleManager initialization and callbacks
3. Remove Intent-related code for Radar scanning
4. Update device list management
5. Keep SleepBoard Intent scanning unchanged

Key improvements:
- More direct device scanning management
- Real-time device discovery
- Simplified code structure for A-vendor devices
- Better error handling

Files changed:
1. ScanActivity.kt - Major updates to scanning logic
2. No layout changes

Detailed changes:
[app/src/main/java/com/bleconfig/ScanActivity.kt]
// File: app/src/main/java/com/bleconfig/ScanActivity.kt
// ??????
// ???
// 1. ?? Radar:TSBLU?????? SleepBoard ????
// 2. ?? TSBLU ??????? All?????
// 3. ???? RadarBleManager ??????

package com.bleconfig

import android.content.Intent
import android.os.Bundle
import android.widget.EditText
import android.widget.RadioButton
import android.widget.RadioGroup
import androidx.appcompat.app.AppCompatActivity
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.TextView
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import android.widget.ImageButton
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale
import com.radar.RadarBleManager
import com.radar.RadarScanResult

class ScanActivity : AppCompatActivity() {

    // ????
    private lateinit var radioGroup: RadioGroup
    private lateinit var inputTSBLU: EditText
    private lateinit var radioRadar: RadioButton
    private lateinit var radioSleep: RadioButton
    private lateinit var rvDevices: RecyclerView
    private lateinit var btnBack: ImageButton

    // ????
    private lateinit var configStorage: ConfigStorage
    
    // A??????
    private var radarManager: RadarBleManager? = null

    // ????
    private val deviceList = mutableListOf<DeviceInfo>()

    // ??????????A??B??
    private var currentScanModule: String? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_scan)

        // ??? A??????
        radarManager = RadarBleManager.getInstance(this)

        // ???????
        configStorage = ConfigStorage(this)

        // ?????
        initViews()
    }

    private fun initViews() {
        // ??????
        radioGroup = findViewById(R.id.radio_device_type)
        inputTSBLU = findViewById(R.id.input_tsblu)
        radioRadar = findViewById(R.id.radio_radar)
        radioSleep = findViewById(R.id.radio_sleep)
        rvDevices = findViewById(R.id.rv_devices)
        btnBack = findViewById(R.id.btn_back)

        // ???????????
        btnBack.setOnClickListener {
            finish()
        }

        // ??? RecyclerView
        val deviceAdapter = DeviceAdapter(deviceList, configStorage.getDeviceHistories()) { device ->
            // ??????? MainActivity
            setResult(RESULT_OK, Intent().apply {
                putExtra(EXTRA_DEVICE_TYPE, device.type.name)
                putExtra(EXTRA_DEVICE_ID, device.name)
                putExtra(EXTRA_DEVICE_MAC, device.macAddress)
            })
            finish()
        }
        rvDevices.layoutManager = LinearLayoutManager(this)
        rvDevices.adapter = deviceAdapter

        // ?? RadioGroup ????
        radioGroup.setOnCheckedChangeListener { _, checkedId ->
            when (checkedId) {
                R.id.radio_radar -> {
                    // ?? Radar ???? A???
                    val tsbluValue = inputTSBLU.text.toString().trim()
                    startRadarScan(filterTSBLU = if (tsbluValue.isEmpty()) null else tsbluValue)
                }
                R.id.radio_sleep -> {
                    // ?? SleepBoard ???? B???
                    startSleepScan()
                }
            }
        }
    }

    // ?? A ????????Radar?
    private fun startRadarScan(filterTSBLU: String?) {
        stopCurrentScan()
        currentScanModule = "A?"

        radarManager?.let { manager ->
            manager.setScanCallback { result ->
                // ??????
                val device = DeviceInfo(
                    type = DeviceType.RADAR,
                    name = result.name ?: "",
                    macAddress = result.device.address,
                    rssi = result.rssi
                )
                
                runOnUiThread {
                    if (!deviceList.any { it.macAddress == device.macAddress }) {
                        deviceList.add(device)
                        rvDevices.adapter?.notifyItemInserted(deviceList.size - 1)
                    }
                }
            }

            // ????
            manager.enableFilter(!filterTSBLU.isNullOrEmpty())
            // ????
            manager.startScan()
        }
    }

    // ?? B ????????SleepBoard?- ????
    private fun startSleepScan() {
        stopCurrentScan()
        currentScanModule = "B?"
        val intent = Intent("com.sleepboard.SCAN_ACTION")
        startActivityForResult(intent, REQUEST_SLEEP_SCAN)
    }

    // ???????
    private fun stopCurrentScan() {
        when (currentScanModule) {
            "A?" -> {
                radarManager?.stopScan()
                deviceList.clear()
                rvDevices.adapter?.notifyDataSetChanged()
            }
            "B?" -> {
                // ?? B?????? - ????
                val intent = Intent("com.sleepboard.STOP_SCAN_ACTION")
                sendBroadcast(intent)
            }
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        stopCurrentScan()
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        if (resultCode == RESULT_OK) {
            when (requestCode) {
                REQUEST_SLEEP_SCAN -> handleSleepResult(data) // ?? B ????????
            }
        }
    }

    // ?? B ???????? - ????
    private fun handleSleepResult(data: Intent?) {
        data?.let {
            val deviceType = it.getStringExtra("device_type") ?: "SLEEP"
            val deviceId = it.getStringExtra("device_id") ?: ""
            val deviceMac = it.getStringExtra("device_mac") ?: ""

            // ???????
            deviceList.add(DeviceInfo(DeviceType.valueOf(deviceType), deviceId, deviceMac, -70))
            (rvDevices.adapter as? DeviceAdapter)?.notifyItemInserted(deviceList.size - 1)
        }
    }

    // ????DeviceAdapter - ????
    private class DeviceAdapter(
        private val deviceList: List<DeviceInfo>,
        private val configuredDevices: List<DeviceHistory>,
        private val onDeviceClick: (DeviceInfo) -> Unit
    ) : RecyclerView.Adapter<DeviceAdapter.DeviceViewHolder>() {
        // ... DeviceAdapter ?????? ...
    }

    companion object {
        private const val REQUEST_SLEEP_SCAN = 101 // B ????????

        // ?????????????
        const val EXTRA_DEVICE_TYPE = "device_type"
        const val EXTRA_DEVICE_ID = "device_id"
        const val EXTRA_DEVICE_MAC = "device_mac"
    }
}